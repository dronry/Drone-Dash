import turtle
import random

# Screen setup
screen = turtle.Screen()
screen.title("Drone Navigation Game")
screen.bgcolor("lightblue")
screen.setup(width=600, height=600)

# Grid properties
GRID_SIZE = 5
CELL_SIZE = 100

# Create grid lines
def draw_grid():
    turtle.speed(0)
    turtle.color("black")
    for i in range(GRID_SIZE + 1):
        # Horizontal lines
        turtle.penup()
        turtle.goto(-GRID_SIZE * CELL_SIZE // 2, -GRID_SIZE * CELL_SIZE // 2 + i * CELL_SIZE)
        turtle.pendown()
        turtle.forward(GRID_SIZE * CELL_SIZE)

    turtle.right(90)
    for i in range(GRID_SIZE + 1):
        # Vertical lines
        turtle.penup()
        turtle.goto(-GRID_SIZE * CELL_SIZE // 2 + i * CELL_SIZE, GRID_SIZE * CELL_SIZE // 2)
        turtle.pendown()
        turtle.forward(GRID_SIZE * CELL_SIZE)

# Create a game object
def create_object(color, shape):
    obj = turtle.Turtle()
    obj.speed(0)
    obj.shape(shape)
    obj.color(color)
    obj.penup()
    return obj

# Positioning helper
def position_object(obj, position):
    x = -GRID_SIZE * CELL_SIZE // 2 + position[1] * CELL_SIZE + CELL_SIZE // 2
    y = GRID_SIZE * CELL_SIZE // 2 - position[0] * CELL_SIZE - CELL_SIZE // 2
    obj.goto(x, y)

# Initialize game objects
def initialize_game():
    global drone, target, obstacles, drone_position, target_position, obstacle_positions
    drone = create_object("blue", "square")
    target = create_object("green", "circle")
    obstacles = []

    reset_positions()

# Reset positions of target and obstacles
def reset_positions():
    global drone_position, target_position, obstacle_positions, obstacles

    # Clear old obstacles
    for obstacle in obstacles:
        obstacle.hideturtle()
    obstacles.clear()

    # Place the drone
    drone_position = [GRID_SIZE - 1, 0]
    position_object(drone, drone_position)

    # Place the target
    while True:
        target_position = [random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)]
        if target_position != drone_position:
            break
    position_object(target, target_position)

    # Place obstacles
    obstacle_positions = []
    for _ in range(GRID_SIZE):
        while True:
            obstacle_position = [random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)]
            if obstacle_position not in [drone_position, target_position] and obstacle_position not in obstacle_positions:
                obstacle_positions.append(obstacle_position)
                obstacle = create_object("red", "triangle")
                position_object(obstacle, obstacle_position)
                obstacles.append(obstacle)
                break

# Handle drone movement
def move_drone(dx, dy):
    global drone_position

    new_position = [drone_position[0] + dx, drone_position[1] + dy]

    # Check boundaries
    if new_position[0] < 0 or new_position[0] >= GRID_SIZE or new_position[1] < 0 or new_position[1] >= GRID_SIZE:
        return

    # Check obstacles
    if new_position in obstacle_positions:
        print("You hit an obstacle! Game Over.")
        turtle.done()
        return

    # Move drone
    drone_position = new_position
    position_object(drone, drone_position)

    # Check if target is reached
    if drone_position == target_position:
        print("You reached the target! Repositioning target and obstacles...")
        reset_positions()

# Bind keyboard controls
def bind_keys():
    screen.listen()
    screen.onkey(lambda: move_drone(-1, 0), "Up")    # Move up
    screen.onkey(lambda: move_drone(1, 0), "Down")   # Move down
    screen.onkey(lambda: move_drone(0, -1), "Left")  # Move left
    screen.onkey(lambda: move_drone(0, 1), "Right")  # Move right

# Main function
def main():
    draw_grid()
    initialize_game()
    bind_keys()
    turtle.mainloop()

# Run the game
main()
